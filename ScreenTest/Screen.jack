// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array twoToThe;
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
	var int i;
	let color = true;
	let i = 1;

	let twoToThe = Array.new(16);
	let twoToThe[0] = 1;

	while((i < 15))
	{
	   let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
	   let i = i + 1;
	}

	let twoToThe[15] = -32767;
 
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	let color = b;
	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	var int address, value, xMod16;
	let address = Math.multiply(32,y) + Math.divide(x, 16);
	let value = Memory.peek(16384 + address);

	let xMod16 = x - Math.multiply(Math.divide(x,16), 16);

	//set x%16 of value to current color.
	if(~color) { //if color is set to white
		if(twoToThe[xMod16] & value) { //if the x%16 pixel is currently black
			let value = ~(value & twoToThe[xMod16]) & (value | twoToThe[xMod16]); //set it to white
			} else {
//			let value = ~(value | twoToThe[xMod16]);
			}
		}
	 else { //if color is set to black
		if(~(twoToThe[xMod16] & value)) { //if the x%16 pixel is currently white

			if(xMod16 < 15){ //for bits 0 - 14
				let value = value | twoToThe[xMod16]; //set it to black
			} else { //16th bit is a special case
				let value = value | (twoToThe[xMod16] - 1);
			}

		} else {
			let value = value + twoToThe[xMod16]; //set it to black
		}
	} 
	do Memory.poke(16384 + address, value);

	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int a, b, dx, dy, diff, x, y;
	var boolean ne, nw, se, sw, up, down, left, right;
	let a = 0;
	let b = 0;
	let x = x1;
	let y = y1;
	let dx = x2-x1;
	let dy = y2-y1;
	let diff = 0;
	let ne = (dx > 0) & (dy > 0);
	let nw = (dx < 0) & (dy > 0);
	let se = (dx > 0) & (dy < 0);
	let sw = (dx < 0) & (dy < 0);
	let up = (dx = 0) & (dy > 0);	
	let down = (dx = 0) & (dy < 0);
	let left = (dx < 0) & (dy = 0);
	let right = (dx > 0) & (dy = 0);

	if(up) {
		while ((b < dy) | (b = dy)) {
			do Screen.drawPixel(x, y+b);
			let b = b + 1;
		}
		return;
	}
	if(down) {
		while ((b < dy) | (b = dy)) {
			do Screen.drawPixel(x, y-b);
			let b = b + 1;
		}
		return;
	}
	if(right) {
		while ( (a < dx) | (a = dx) ) {
			do Screen.drawPixel(x+a, y);
			let a = a + 1;
		}
		return;
	}
	if(left) {
		while (a < dx | (a = dx) ) {
			do Screen.drawPixel(x-a, y);
			let a = a + 1;
		}
		return;
	}
	while( ((a < dx) | (a = dx)) & ((b < dy) | (b = dy)) ) {
		if (ne) {
			do Screen.drawPixel(x+a, y+b);
		}
		if (nw) {
			do Screen.drawPixel(x-a, y+b);
		}
		if (se) {
			do Screen.drawPixel(x+a, y-b);
		}
		if (sw) {
			do Screen.drawPixel(x-a, y-b);
		}
		if(diff < 0) {
			let a = a+1;
			let diff = diff + dy;
		} else {
			let b = b+1;
			let diff = diff - dx;			
		}
	}
	return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	var int x, y, dx, dy, a, b;
	let x = x1;
	let y = y1;
	let b = 0;
	let dy = y2-y1;

	while( ((b < dy) | (b = dy)) ) {
		do Screen.drawLine(x1, y + b, x2, y + b);
		let b = b + 1;
	}
	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	var int dy, x1, x2, y1, y2;

	if(r > 181) {
		return;
	}

	let dy = -r;
	let y1 = y + dy;
	let y2 = y + dy;
	let x1 = x - Math.sqrt(Math.multiply(r,r) - Math.multiply(dy, dy));
	let x2 = x + Math.sqrt(Math.multiply(r,r) - Math.multiply(dy, dy));
	while(dy < r) {
		do Screen.drawLine(x1, y1, x2, y2);
		let dy = dy + 1;
		let y1 = y + dy;
		let y2 = y + dy;
		let x1 = x - Math.sqrt(Math.multiply(r,r) - Math.multiply(dy, dy));
		let x2 = x + Math.sqrt(Math.multiply(r,r) - Math.multiply(dy, dy));
	}
	
	return;
    }
}
