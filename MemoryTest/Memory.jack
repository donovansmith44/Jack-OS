// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static array ram, freeList, heap;
	static int numAllocs;

    /** Initializes the class. */
    function void init() {
	let ram = 0;
	let numAllocs = 0;
	let heap = 2048; //heapBase
	let heap[0] = null;
	let heap[1] = 14334; //heap size
	
	let freeList = 2048;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var int tempSize;
	var array block, lastBlock, nextBlock;
	let block = 0;
	let numAllocs = numAllocs + 1;

	if(freeList[0] = null & ~(freeList[1] < (size + 2)))
	{
	   let block = freeList;
	   let tempSize = freeList[1] - (size + 2);
	   let block[0] = null;
	   let block[1] = size;
	   let freeList = freeList + size + 2;
	   let freeList[0] = null;
	   let freeList[1] = tempSize;
	   return block;
	}

 	let nextBlock = freeList[0];

	while((nextBlock[1] < (size + 2)) & ~(nextBlock[0] = null))
	{
	   let nextBlock = nextBlock[0];
	}

	if(nextBlock[0] = null){ //if nextBlock[0] = null, we have reached the end of the list without finding a properly sized memory block
	   return 0; //failure
	}
	else{
	   let nextBlock[1] = nextBlock[1] - (size+2);
	   return nextBlock + nextBlock[1] - size;
	}
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var array endBlock;
	let endBlock = freeList[0];

	while(~(endBlock = null))
	{
	   let endBlock = endBlock[0];
	}

	let endBlock = o;

	let o[0] = null;
	return;
    }   
}
