// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
	var int i;
	let i = 1;

	let twoToThe = Array.new(16);
	let twoToThe[0] = i;

	while(i < 15)
	{
	   let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
	   let i = i + 1;
	}
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int sum, shiftedX, j;

	let sum = 0;
	let shiftedX = x;
	let j = 0;

	while (j < 15)
	{
	   if(bit(y,j))
	   {
	       let sum = sum + shiftedX;
	       let shiftedX = shiftedX + shiftedX;
	   }
	   let j = j + 1;
	}
	
    } //end multiply

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    } //end divide

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    } //end sort

    /** Returns the greater number. */
    function int max(int a, int b) {
    } //end max

    /** Returns the smaller number. */
    function int min(int a, int b) {
    } //end min

    function boolean bit(int y, int j){
    
	var boolean bitwiseComparison;

	let bitwiseComparison = y & j;

	if (bitwiseComparison = 0){	
	   return false;
    	}
    	else{
    	   return true;
    	}
    } //end bit
}
